name: Auto Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/*.yml"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/*.yml"
jobs:
  build:
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [windows, freebsd, openbsd, linux, dragonfly, darwin]
        goarch: [amd64, 386]
        softfloat: [hardfloat]
        exclude:
          # Exclude i386 on darwin and dragonfly.
          - goarch: 386
            goos: dragonfly
          - goarch: 386
            goos: darwin
        include:
          - goos: darwin
            goarch: arm64
          # BEGIN Linux ARM 5 6 7
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          # END Linux ARM 5 6 7
          # BEGIN Android ARM 8
          - goos: android
            goarch: arm64
          # END Android ARM 8
          # Windows ARM 7
          - goos: windows
            goarch: arm
            goarm: 7
          # BEGIN Other architectures
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          # BEGIN MIPS
          - goos: linux
            goarch: mips64
          - goos: linux
            goarch: mips64le
          - goos: linux
            goarch: mipsle
            softfloat: softfloat
          - goos: linux
            goarch: mips
            softfloat: softfloat
          # END MIPS
          # BEGIN PPC
          - goos: linux
            goarch: ppc64
          - goos: linux
            goarch: ppc64le
          # END PPC
          # BEGIN FreeBSD ARM
          - goos: freebsd
            goarch: arm64
          - goos: freebsd
            goarch: arm
            goarm: 7
          # END FreeBSD ARM
          # BEGIN S390X
          - goos: linux
            goarch: s390x
          # END S390X
          # END Other architectures
          # BEGIN OPENBSD ARM
          - goos: openbsd
            goarch: arm64
          - goos: openbsd
            goarch: arm
            goarm: 7
          # END OPENBSD ARM
      fail-fast: false

    runs-on: ubuntu-20.04
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      CGO_ENABLED: 0
      BUILD: ${{github.ref}}
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Show workflow information
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOMIPS\"].friendlyName" -r < .github/build/friendly-filenames.json)
          echo "VERSION=$(grep version core/core.go| head -n 1| cut -d = -f2| tr -d \"' ')" >> $GITHUB_ENV
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, GOMIPS: $GOMIPS, RELEASE_NAME: $_NAME"
          echo "::set-output name=ASSET_NAME::$_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          stable: 'false'
          go-version: 1.16.0-rc1
      - name: Get project dependencies
        run: go mod download

      - name: Build Xray
        run: |
          sed -i '/build/ s/Custom/$BUILD/' ./core/core.go
          cat ./core/core.go
          mkdir -p build_assets
          go build -v -o build_assets/xray -trimpath -ldflags "-s -w -buildid=" ./main

      - name: Build Windows Xray
        if: matrix.goos == 'windows'
        run: |
          cd ./build_assets || exit 1
          mv xray xray.exe
      - name: Prepare to release
        run: |
          cp ${GITHUB_WORKSPACE}/README.md ./build_assets/README.md
          cp ${GITHUB_WORKSPACE}/LICENSE ./build_assets/LICENSE
          wget -O ./build_assets/geoip.dat https://github.com/v2fly/geoip/releases/latest/download/geoip.dat
          wget -O ./build_assets/geosite.dat https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat
      - name: Prepare package for Linux
        if: matrix.goos == 'linux'
        run: |
          ls 
          cp -rv ${GITHUB_WORKSPACE}/.github/build/systemd ./build_assets/systemd
      - name: Build Mips softfloat Xray and Create ZIP archive
        if: matrix.softfloat == 'softfloat'
        run: |
          pushd build_assets || exit 1
          touch -mt 202001010000 xray*
          touch -mt 202001010000 *
          zip -9vr ../Xray-$ASSET_NAME-hardfloat.zip .
          popd || exit 1
          GOMIPS=softfloat go build -v -o build_assets/xray -trimpath -ldflags "-s -w -buildid=" ./main
          pushd build_assets || exit 1
          touch -mt 202001010000 xray*
          touch -mt 202001010000 *
          zip -9vr ../Xray-$ASSET_NAME-softfloat.zip .
          popd || exit 1
          GOMIPS=hardfloat
          zip -9vr ./Xray-$ASSET_NAME.zip ./Xray-$ASSET_NAME-*
          rm -rf ./build_assets/*
          cp ./Xray-$ASSET_NAME-* ./build_assets/
          FILE=./Xray-$ASSET_NAME.zip
          DGST=$FILE.dgst
          openssl dgst -md5    $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha1   $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha256 $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha512 $FILE | sed 's/([^)]*)//g' >>$DGST
      - name: Create ZIP archive
        if: matrix.softfloat != 'softfloat'
        run: |
          pushd build_assets || exit 1
          touch -mt 202001010000 xray*
          touch -mt 202001010000 *
          zip -9vr ../Xray-$ASSET_NAME.zip .
          popd || exit 1
          FILE=./Xray-$ASSET_NAME.zip
          DGST=$FILE.dgst
          openssl dgst -md5    $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha1   $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha256 $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha512 $FILE | sed 's/([^)]*)//g' >>$DGST

      - name: Change the name
        run: |
          mv build_assets Xray-$ASSET_NAME

      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Xray-${{ steps.get_filename.outputs.ASSET_NAME }}.zip
          path: ./Xray-${{ steps.get_filename.outputs.ASSET_NAME }}.zip*